from processpiper.text2diagram import render

# input_syntax = """
# title: Sample Test Process
# colourtheme: GREENTURTLE
#     lane: End User
#         (start) as start
#         [Enter Keyword] as enter_keyword
#         (end) as end
# pool: System Search
#     lane: Database System
#         [Login] as login
#         [Search Records] as search_records
#         <Result Found?> as result_found
#         [Display Result] as display_result
#         [Logout] as logout
#     lane: Log System
#         [Log Error] as log_error

# start->login->enter_keyword->search_records->result_found->display_result->logout->end
# result_found->log_error->display_result

# footer: Generated by ProcessPiper
# """

# input_syntax = """
# title: Test Process
# colourtheme: GREENTURTLE
# pool: Pool A
#     lane: Lane A
#         (start) as start
#         [Task 1] as task1
#         <branch 1> as branch1
#         [@subprocess Sub process 1] as subprocess1
#         <@parallel branch 2> as branch2
#         <@inclusive branch 3> as branch3
#         (end) as end
# pool: Pool B
#     lane: Lane B
#         (@timer schedule 1) as timer_schedule
#         (@intermediate schedule 2) as intermediate_schedule

# start->task1->branch1->subprocess1->branch2->branch3->end
# branch1->timer_schedule->intermediate_schedule->end

# footer: Generated by Process Piper
# """

# input_syntax = """
# title: Pizza Order Process
# colourtheme: BLUEMOUNTAIN
# lane: Customer
#         (start) as start
#         [Browse PizzaPiper website] as browse_website
#         [Order a pizza] as order_pizza
#         [Make payment] as make_payment
#         [Receive pizza] as receive_pizza
#         (end) as end
# pool: Pizza Piper Enterprise
#     lane: Pizza Shop
#         [Receive order] as receive_order
#         [Bake pizza] as bake_pizza
#         <Pizza ready?> as pizza_ready
#     lane: Pizza Delivery
#         [Deliver pizza] as deliver_pizza

# start->browse_website->order_pizza->make_payment
# make_payment-"Order details"->receive_order->bake_pizza
# bake_pizza->pizza_ready-"Yes"->deliver_pizza-"Freshly baked \\npizza"->receive_pizza
# pizza_ready-"No"->bake_pizza
# receive_pizza->end
# """

# input_syntax = """
# title: This is a test diagram
# colourtheme: GREENTURTLE
# lane: Customer
# (start) as start
# [Do something] as do
# (end) as end

# start->do->end
# """

input_syntax = """
# Showcase Process Piper plain text to diagram capability
# -------------------------------------------------------
# Set diagram title
title: Make pizza process
# Set diagram colour theme
colourtheme: BLUEMOUNTAIN
lane: Pizza Shop
    (start) as start
    [Put the pizza in the oven] as put_pizza_in_oven
    [Check to see if pizza is done] as check_pizza_done
    <@parallel Done baking?> as done_baking
    [Take the pizza out of the oven] as take_pizza_out_of_oven
    (end) as end
    
start->put_pizza_in_oven->check_pizza_done->done_baking
done_baking-"Yes"->take_pizza_out_of_oven->end
done_baking-"No"->put_pizza_in_oven
"""

input_syntax = """
title: Signal Example
colourtheme: GREENTURTLE
pool: pool 1
lane: lane 1
    (@signal signal 1) as event1
    (@signal signal 2) as event2
    (@signal signal 3) as event3

event1->event2->event3
"""

input_syntax = """
title: Signal Example
colourtheme: GREENTURTLE
pool: pool 1
lane: lane 1
    (@conditional signal 1) as event1
    (@conditional signal 2) as event2
    (end) as event3

event1->event2->event3
"""

input_syntax = """
title: Signal Example
colourtheme: GREENTURTLE
pool: pool 1
lane: lane 1
    (@message signal 1) as event1
    (@message signal 2) as event2
    (@message signal 3) as event3

event1->event2->event3
"""

input_syntax = """
title: Signal Example
colourtheme: GREENTURTLE
pool: pool 1
lane: lane 1
    (@message signal 1) as event1
    (@message signal 2) as event2
    (@message signal 3) as event3
    (@link signal 4) as event4

event1->event2->event3->event4
"""

gen_code, img = render(input_syntax)
print(f"Generated code:\n{gen_code}")
img.save("images/test/test_diagram.png")
